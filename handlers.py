from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.utils import markdown
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode
from api import (authenticate_user, refresh_access_token, get_user_delivery, check_user_registered, link_telegram_id,
                 get_user_history)
from cache import get_tokens_redis, save_tokens_redis, delete_tokens_redis
from config import format_order, get_status_orders, get_status_history, format_history, auth_required
from keyboards import main_keyboard

dp_router = Router()

class AuthState(StatesGroup):
    username = State()
    password = State()


@dp_router.message(Command("start"))
async def start(message: Message, state: FSMContext):
    tg_id = message.from_user.id
    tokens = await get_tokens_redis(tg_id)

    if tokens:
        await message.answer("‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! \n"
                             "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.", reply_markup=main_keyboard())
    else:
        await message.answer(text=markdown.text("üîê –í–≤–µ–¥–∏—Ç–µ –≤–∞—à", markdown.bold("username"), "–æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –º–∞–≥–∞–∑–∏–Ω–∞:"),
                             parse_mode=ParseMode.MARKDOWN_V2)
        await state.set_state(AuthState.username)


@dp_router.message(AuthState.username)
async def handle_username(message: Message, state: FSMContext):
    await state.update_data(username=message.text)
    await message.answer(text=markdown.text("üîê –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à ", markdown.bold("–ø–∞—Ä–æ–ª—å"), ":"),
                         parse_mode=ParseMode.MARKDOWN_V2)
    await state.set_state(AuthState.password)


@dp_router.message(AuthState.password)
async def handle_password(message: Message, state: FSMContext):
    data = await state.get_data()
    username = data["username"]
    password = message.text
    tg_id = message.from_user.id

    tokens = await authenticate_user(username, password)
    if not tokens:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ!")
        await state.clear()
        return

    if not await save_tokens_redis(tg_id, tokens):
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        return

    success = await link_telegram_id(tokens["access"], tg_id)
    if not success:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        return

    await message.answer("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!\n "
                         "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ. ", reply_markup=main_keyboard())
    await state.clear()


@dp_router.message(F.text == '–î–æ—Å—Ç–∞–≤–∫–∞')
@auth_required
async def delivery_handler(message: Message, access_token: str):
    orders = await get_user_delivery(access_token)

    if not orders:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        return

    delivered = [o for o in orders if o['status'] == 'delivered']
    on_the_way = [o for o in orders if o['status'] == 'on the way']

    response = ["üì¶ <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã</b>"]

    if delivered:
        response.append("\nüéÅ <b>–ì–æ—Ç–æ–≤—ã –∫ –≤—ã–¥–∞—á–µ:</b>")
        response.extend(format_order(o) for o in delivered)

    if on_the_way:
        response.append("\nüöö <b>–í –ø—É—Ç–∏:</b>")
        response.extend(format_order(o) for o in on_the_way)

    full_message = "\n".join(response)
    for part in [full_message[i:i + 4000] for i in range(0, len(full_message), 4000)]:
        await message.answer(part, parse_mode=ParseMode.HTML)


@dp_router.message(F.text == '–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫')
@auth_required
async def history_handler(message: Message, access_token: str):
    histories = await get_user_history(access_token)

    if not histories:
        await message.answer("üì≠ –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç–∞.")
        return

    response = [
        "üõí <b>–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫</b>",
        f"<b>–í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫: {len(histories)}</b>\n"
    ]

    response.extend(format_history(item) for item in histories)

    full_message = "\n".join(response)
    for part in [full_message[i:i + 4000] for i in range(0, len(full_message), 4000)]:
        await message.answer(part, parse_mode=ParseMode.HTML)


@dp_router.message(F.text == '–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞–Ω—É—Ç–∞')
async def delete_token_handler(message: Message):
    tg_id = message.from_user.id
    try:
        success = await delete_tokens_redis(tg_id)
        if success:
            await message.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.\n"
                    "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start", reply_markup=ReplyKeyboardRemove())
        else:
            await message.answer(
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=ReplyKeyboardRemove())
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@dp_router.message()
async def message_handler(message: Message):
    await message.answer('–ü–æ–¥–æ–∂–¥–∏—Ç–µ —Å–µ–∫—É–Ω–¥—É...')
    if message.text:
        await message.answer(message.text, entities=message.entities)